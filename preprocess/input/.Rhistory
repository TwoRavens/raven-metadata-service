source('~/Downloads/01_basic_statistics.R')
source('~/Downloads/02_graphical_statistics.R')
source('~/Downloads/02_graphical_statistics.R')
source('~/Downloads/02_graphical_statistics.R')
source('~/Downloads/02_graphical_statistics.R')
source('~/Downloads/02_graphical_statistics.R')
source('~/Downloads/02_graphical_statistics.R')
U<- runif(20)
print(U)
P<- qunif(0.6)
print(P)
P<- qunif(U)
print(P)
year <- seq(from=1790, to=2010, by=10)
uspop <- c(3.9, 5.3, 7.2, 9.6, 12.9, 17.1, 23.2, 31.4, 38.6, 50.2, 63.0, 76.2,
92.2, 106.0, 123.2, 132.2, 151.3, 179.3, 203.3, 226.5, 248.7,
281.4, 308.7)
plot(year, uspop, ylab="Population (in millions)", main="US population since 1790")
source('~/Downloads/HW1_R_code.R')
pbinom(q = 10 - 1, size = 20, prob = 0.4, lower.tail = FALSE)
pbinom(q = 10 - 1, size = 20, prob = 0.4, lower.tail = TRUE)
dbinom(q = 10 - 1, size = 20, prob = 0.4, lower.tail = TRUE)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
singer = read.table("/Users/kripanshubhargava/Downloads/singer.txt",sep = ",", header = TRUE)
boxplot(singer$height~singer$voice.part)
singer = read.table("/Users/kripanshubhargava/Downloads/singer.txt",sep = ",", header = TRUE)
singer
boxplot(singer$X.height.~singer$X.voice.part)
boxplot(singer$X.height.~singer$X.voice.part)
singer <- split(singer, singer$X.voice.part)
singer = read.table("/Users/kripanshubhargava/Downloads/singer.txt",sep = ",", header = TRUE)
singer
boxplot(singer$X.height.~singer$X.voice.part)
singer <- split(singer, singer$X.voice.part)
mean_alto_height = mean(singer$Alto$X.height.)
mean_bass_height = mean(singer$Bass$X.height)
mean_soprano_height = mean(singer$Soprano$X.height)
mean_tenor_height = mean(singer$Tenor$X.height)
sd_alto_height = sd(singer$Alto$X.height)
sd_bass_height = sd(singer$Bass$X.height)
sd_soprano_height = sd(singer$Soprano$X.height)
sd_tenor_height = sd(singer$Tenor$X.height)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/Downloads/BassTenor.R')
source('~/Ex3proj5.R')
source('~/Downloads/BassTenor.R')
source('~/Downloads/BassTenor.R')
source('~/Downloads/BassTenor.R')
source('~/Downloads/BassTenor.R')
source('~/Downloads/Untitled.R')
library(readr)
fearonLaitin <- read_csv("~/Desktop/Titanic/fearonLaitin.csv")
View(fearonLaitin)
head(fearonLaitin)
preProValues <- preProcess(fearonLaitin[,-69],method = c("center","scale"))
library(caret)
install.packages(caret)
install.packages("caret",repos="http://cran.rstudio.com/")
preProValues <- preProcess(fearonLaitin[,-69],method = c("center","scale"))
library(lattice)
library(ggplot2)
library(caret)
#packages for preprocess
library(rpart)
library(rpart.plot)
install.packages("ggplot2",repos="http://cran.rstudio.com/")
library(lattice)
library(ggplot2)
library(caret)
#packages for preprocess
library(rpart)
library(rpart.plot)
install.packages("munsell")
library(lattice)
library(ggplot2)
library(caret)
#packages for preprocess
library(rpart)
library(rpart.plot)
install.packages("stringi")
library(lattice)
library(ggplot2)
library(caret)
#packages for preprocess
library(rpart)
library(rpart.plot)
rpartModel <- rpart(ccode~.,data=procdata,control = rpart.control(cp=0))
rpartModel <- rpart(ccode~.,data=fearonLaitin,control = rpart.control(cp=0))
rpart.plot(rpartModel)
rpartModel <- rpart(ccode~.,data=fearonLaitin,control=rpart.control(minsplit=30))
rpart.plot(rpartModel)
rpartModel <- rpart(ccode~.,data=fearonLaitin,control=rpart.control(minsplit=20))
plot(rpartModel)
text(rpartModel)
rpart.plot(rpartModel)
install.packages("rattle")
prp(fearonLaitin)					# Will plot the tree
prp(fearonLaitin,varlen=3)				# Shorten variable names
library(rattle)					# Fancy tree plot
library(rpart.plot)				# Enhanced tree plots
library(RColorBrewer)				# Color selection for fancy tree plot
library(party)					# Alternative decision tree algorithm
library(partykit)				# Convert rpart object to BinaryTree
library(caret)
install.packages("DEoptimR")
install.packages("caret")
library(rattle)					# Fancy tree plot
library(rpart.plot)				# Enhanced tree plots
library(RColorBrewer)				# Color selection for fancy tree plot
library(party)					# Alternative decision tree algorithm
library(partykit)				# Convert rpart object to BinaryTree
library(caret)
install.packages("rattle")
library(rattle)
install.packages("‘RGtk2’")
prp(fearonLaitin)					# Will plot the tree
prp(fearonLaitin,varlen=3)				# Shorten variable names
library(rpart)
library(caret)
library(rattle)
library(rpart.plot)
library(rpart)
tworavens <- read.csv("fearonlatin",Head="true")
library(readr)
fearonLaitin <- read_csv("~/Desktop/Titanic/fearonLaitin.csv")
View(fearonLaitin)
source('~/Desktop/Titanic/DecisionTreeSample.R')
tworavens <- read_csv("~/Desktop/Titanic/fearonLaitin.csv")
myTree <- rpart(ccode ~ , data=tworavens,control=rpart.control(minsplit=20,cp=0))
rpart.plot(myTree)
myTree <- rpart(ccode~.,data=tworavens,control=rpart.control(minsplit=20,cp=0))
rpart.plot(myTree)
View(myTree)
names(myTree)
class(myTree$frame)
View(myTree$frame)
?rpart.plot
class(myTree$splits)
dim(myTree$splits)
View(myTree$splits)
myTree1 <- rpart(year ~.,data=tworavens,control=rpart.control(minsplit=20,cp=0))
rpart.plot(myTree1)
names(myTree1)
View(myTree1$frame)
library(rpart)
library(caret)
library(rpart.plot)
library(rpart.list)
library(jsonlite)
library(partykit)
#read data feoranLatin
tworavens <- read_csv("~/Desktop/Titanic/fearonLaitin.csv")
colnames(tworavens)
myTree <- rpart(year~.,data=tworavens,control=rpart.control(minsplit=20,cp=0))
#rpart.plot(myTree)
samplecsv<- read_json("~/Desktop/Titanic/iris.json")
data.frame(myTree)
samplecsv.error
myTree
tworavens <- read_csv("~/Desktop/Titanic/fearonLaitin.csv")
myTree<-read.csv("~/Desktop/Titanic/fearonLaitin.csv")
myTree <- rpart(year~.,data=tworavens,control=rpart.control(minsplit=20,cp=0))
myTree <- rpart(year~.,data=myTree,control=rpart.control(minsplit=20,cp=0))
myTree
data.frame(myTree)
View(myTree)
myTree<-read.csv("~/Desktop/Titanic/fearonLaitin.csv")
decisionTree <- rpart(year~.,data=myTree,control=rpart.control(minsplit=20,cp=0))
frame(decisionTree)
data.frame(decisionTree)
file<- toJSON(decisionTree)
x<- list(decisionTree)
x
jsontest = toJSON(x, pretty = TRUE, auto_unbox = TRUE)
toJSON(list(coefficients=anorex.1[["coefficients"]],
coefNames=names(anorex.1[["coefficients"]]),
residuals=anorex.1[["residuals"]]))
toJSON(list(coefficients=x[["coefficients"]],
coefNames=names(x[["coefficients"]]),
residuals=x[["residuals"]]))
l<-toJSON(list(coefficients=x[["coefficients"]],
coefNames=names(x[["coefficients"]]),
residuals=x[["residuals"]]))
l
library(party)
irisct <- ctree(Species ~ .,data = iris)
plot(irisct)
get_ctree_parts <- function(x, ...)
{
UseMethod("get_ctree_parts")
}
get_ctree_parts.BinaryTree <- function(x, ...)
{
get_ctree_parts(attr(x, "tree"))
}
get_ctree_parts.SplittingNode <- function(x, ...)
{
with(
x,
list(
name       = toString(nodeID),
children   = list(get_ctree_parts(x$left),get_ctree_parts(x$right))
)
)
}
get_ctree_parts.BinaryTree <- function(x, ...)
{
get_ctree_parts(attr(x, "tree"))
}
get_ctree_parts.SplittingNode <- function(x, ...)
{
with(
x,
list(
name       = toString(nodeID),
children   = list(get_ctree_parts(x$left),get_ctree_parts(x$right))
)
)
}
l<-toJSON(get_ctree_parts(irisct))
library(party)
irisct <- ctree(Species ~ .,data = iris)
plot(irisct)
get_ctree_parts <- function(x, ...)
{
UseMethod("get_ctree_parts")
}
get_ctree_parts.BinaryTree <- function(x, ...)
{
get_ctree_parts(attr(x, "tree"))
}
get_ctree_parts.SplittingNode <- function(x, ...)
{
with(
x,
list(
name       = toString(nodeID),
children   = list(get_ctree_parts(x$left),get_ctree_parts(x$right))
)
)
}
toJSON(get_ctree_parts(irisct))
library(party)
irisct <- ctree(Species ~ .,data = iris)
plot(irisct)
get_ctree_parts <- function(x, ...)
{
UseMethod("get_ctree_parts")
}
get_ctree_parts.BinaryTree <- function(x, ...)
{
get_ctree_parts(attr(x, "tree"))
}
get_ctree_parts.SplittingNode <- function(x, ...)
{
with(
x,
list(
name       = toString(nodeID),
children   = list(get_ctree_parts(x$left),get_ctree_parts(x$right))
)
)
}
get_ctree_parts.TerminalNode <- function(x, ...)
{
with(
x,
list(
name     = paste(nodeID,"weights",sum(weights),"prediaction",toString(paste("[",toString(prediction),"]",sep=" ")),sep = " ")
)
)
}
l<-toJSON(get_ctree_parts(irisct))
library(jsonlite)
library(party)
irisct <- ctree(Species ~ .,data = iris)
plot(irisct)
get_ctree_parts <- function(x, ...)
{
UseMethod("get_ctree_parts")
}
get_ctree_parts.BinaryTree <- function(x, ...)
{
get_ctree_parts(attr(x, "tree"))
}
get_ctree_parts.SplittingNode <- function(x, ...)
{
with(
x,
list(
name       = toString(nodeID),
children   = list(get_ctree_parts(x$left),get_ctree_parts(x$right))
)
)
}
get_ctree_parts.TerminalNode <- function(x, ...)
{
with(
x,
list(
name     = paste(nodeID,"weights",sum(weights),"prediaction",toString(paste("[",toString(prediction),"]",sep=" ")),sep = " ")
)
)
}
l<-toJSON(get_ctree_parts(irisct))
l
library(readr)
fearonLaitin <- read_csv("~/Desktop/Titanic/fearonLaitin.csv")
View(fearonLaitin)
library(party)
myTree <- ctree(year ~ .,data =fearonLaitin )
myTree <- ctree(year ~ .,data =fearonLaitin, ytrafo = NULL, scores = NULL )
library(readr)
test <- read_csv("~/Desktop/Titanic/test.csv")
View(test)
irisct <- ctree(Name ~ .,data = test)
irisct <- ctree(PassengerId~ .,data = test)
myTree
myTree <- rpart(year~.,data=fearonLaitin,control=rpart.control(minsplit=20,cp=0))
library(rpart)
myTree <- rpart(year~.,data=fearonLaitin,control=rpart.control(minsplit=20,cp=0))
library(rpart)
fearonLaitin <- read_csv("~/Desktop/Titanic/fearonLaitin.csv")
myTree <- rpart(year~.,data=fearonLaitin,control=rpart.control(minsplit=20,cp=0))
get_ctree_parts <- function(x, ...)
{
UseMethod("get_ctree_parts")
}
get_ctree_parts.BinaryTree <- function(x, ...)
{
get_ctree_parts(attr(x, "tree"))
}
get_ctree_parts.SplittingNode <- function(x, ...)
{
with(
x,
list(
name       = toString(nodeID),
children   = list(get_ctree_parts(x$left),get_ctree_parts(x$right))
)
)
}
get_ctree_parts.TerminalNode <- function(x, ...)
{
with(
x,
list(
name     = paste(nodeID,"weights",sum(weights),"prediaction",toString(paste("[",toString(prediction),"]",sep=" ")),sep = " ")
)
)
}
l<-toJSON(get_ctree_parts(myTree))
library(readr)
fearonLaitin <- read_csv("~/Desktop/Titanic/fearonLaitin.csv")
View(fearonLaitin)
fearonLaitin$ccode
fearonLaitin$ccode=0
fearonLaitin$ccode
fearonLaitin$cname=0
fearonLaitin$cname
View(fearonLaitin)
fearonLaitin$country=0
View(fearonLaitin)
library(party)
irisct <- ctree(Species ~ .,data = iris,na.action = na.pass)
irisct <- ctree(year ~ .,data = fearonLaitin)
irisct <- ctree(year ~as.character(.),data = fearonLaitin)
irisct <- ctree(year ~as.character(),data = fearonLaitin)
iris
fearonLaitin$cname=null
fearonLaitin$cname=NULL
View(fearonLaitin)
fearonLaitin$country=NULL
fearonLaitin$ccode=NULL
irisct <- ctree(year ~,data = fearonLaitin)
irisct <- ctree(year ~ .,data = fearonLaitin)
source('~/Desktop/Titanic/DecisionTreeSample.R')
fearonLaitin <- read_csv("~/Desktop/Titanic/fearonLaitin.csv")
myTree <- rpart(year~.,data=fearonLaitin,control=rpart.control(minsplit=20,cp=0))
json_prsr <- function(tree, node = 1, node_stats = NULL){
# Checking the decision tree object
if(!is(tree, c("constparty","party")))
tree <- partykit::as.party(tree)
# Parsing into json format
str  <- ""
rule <- partykit:::.list.rules.party(tree, node)
if(is.null(node_stats))
node_stats <- table(tree$fitted[1])
children <- partykit::nodeids(tree, node)
if (length(children) == 1) {
ct  <- node_stats[as.character(children)]
# print("This is ct",ct)
str <- paste("{","'name': '",children,"','size':",ct,",'rule':'",rule,"'}", sep='')
} else {
str <- paste("{","'name': '", node,"', 'rule': '", rule, "', 'children': [", sep='')
for(child in children){
check <- paste("{'name': '", child, "'", sep='')
if(child != node & ( !grepl(check, str, fixed=TRUE) ) ) {
child_str <- json_prsr(tree, child, node_stats)
str <- paste(str, child_str, ',', sep='')
}
}
str <- substr(str, 1, nchar(str)-1) #Remove the comma
str <- paste(str,"]}", sep='')
}
return(str)
}
requiredString <- json_prsr(myTree)
requiredString
source('~/Desktop/Titanic/DecisionTreeSample.R')
fearonLaitin <- read_csv("~/Desktop/Titanic/fearonLaitin.csv")
myTree <- rpart(year~.,data=fearonLaitin,control=rpart.control(minsplit=20,cp=0))
json_prsr <- function(myTree, node = 1, node_stats = NULL){
# Checking the decision tree object
if(!is(tree, c("constparty","party")))
tree <- partykit::as.party(tree)
# Parsing into json format
str  <- ""
rule <- partykit:::.list.rules.party(tree, node)
if(is.null(node_stats))
node_stats <- table(tree$fitted[1])
children <- partykit::nodeids(tree, node)
if (length(children) == 1) {
ct  <- node_stats[as.character(children)]
# print("This is ct",ct)
str <- paste("{","'name': '",children,"','size':",ct,",'rule':'",rule,"'}", sep='')
} else {
str <- paste("{","'name': '", node,"', 'rule': '", rule, "', 'children': [", sep='')
for(child in children){
check <- paste("{'name': '", child, "'", sep='')
if(child != node & ( !grepl(check, str, fixed=TRUE) ) ) {
child_str <- json_prsr(tree, child, node_stats)
str <- paste(str, child_str, ',', sep='')
}
}
str <- substr(str, 1, nchar(str)-1) #Remove the comma
str <- paste(str,"]}", sep='')
}
return(str)
}
requiredString <- json_prsr(myTree)
source('~/Desktop/Titanic/DecisionTreeSample.R')
fearonLaitin <- read_csv("~/Desktop/Titanic/fearonLaitin.csv")
myTree <- rpart(year~.,data=fearonLaitin,control=rpart.control(minsplit=20,cp=0))
json_prsr <- function(tree, node = 1, node_stats = NULL){
# Checking the decision tree object
if(!is(tree, c("constparty","party")))
tree <- partykit::as.party(tree)
# Parsing into json format
str  <- ""
rule <- partykit:::.list.rules.party(tree, node)
if(is.null(node_stats))
node_stats <- table(tree$fitted[1])
children <- partykit::nodeids(tree, node)
if (length(children) == 1) {
ct  <- node_stats[as.character(children)]
# print("This is ct",ct)
str <- paste("{","'name': '",children,"','size':",ct,",'rule':'",rule,"'}", sep='')
} else {
str <- paste("{","'name': '", node,"', 'rule': '", rule, "', 'children': [", sep='')
for(child in children){
check <- paste("{'name': '", child, "'", sep='')
if(child != node & ( !grepl(check, str, fixed=TRUE) ) ) {
child_str <- json_prsr(tree, child, node_stats)
str <- paste(str, child_str, ',', sep='')
}
}
str <- substr(str, 1, nchar(str)-1) #Remove the comma
str <- paste(str,"]}", sep='')
}
return(str)
}
requiredString <- json_prsr(myTree)
find.package('rpart')
x <- c(101, 1213)
ecdf(x)
setwd("/Users/kripanshubhargava/Desktop/raven-metadata-service/preprocess/input/")
setwd("/Users/kripanshubhargava/Desktop/raven-metadata-service/preprocess/input/")
source('preprocess.R')
preprocess(filename='/Users/kripanshubhargava/Desktop/raven-metadata-service/preprocess/input/learningData.csv')
