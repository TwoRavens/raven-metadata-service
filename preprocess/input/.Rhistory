library(rattle)					# Fancy tree plot
library(rpart.plot)				# Enhanced tree plots
library(RColorBrewer)				# Color selection for fancy tree plot
library(party)					# Alternative decision tree algorithm
library(partykit)				# Convert rpart object to BinaryTree
library(caret)
install.packages("DEoptimR")
install.packages("caret")
library(rattle)					# Fancy tree plot
library(rpart.plot)				# Enhanced tree plots
library(RColorBrewer)				# Color selection for fancy tree plot
library(party)					# Alternative decision tree algorithm
library(partykit)				# Convert rpart object to BinaryTree
library(caret)
install.packages("rattle")
library(rattle)
install.packages("‘RGtk2’")
prp(fearonLaitin)					# Will plot the tree
prp(fearonLaitin,varlen=3)				# Shorten variable names
library(rpart)
library(caret)
library(rattle)
library(rpart.plot)
library(rpart)
tworavens <- read.csv("fearonlatin",Head="true")
library(readr)
fearonLaitin <- read_csv("~/Desktop/Titanic/fearonLaitin.csv")
View(fearonLaitin)
source('~/Desktop/Titanic/DecisionTreeSample.R')
tworavens <- read_csv("~/Desktop/Titanic/fearonLaitin.csv")
myTree <- rpart(ccode ~ , data=tworavens,control=rpart.control(minsplit=20,cp=0))
rpart.plot(myTree)
myTree <- rpart(ccode~.,data=tworavens,control=rpart.control(minsplit=20,cp=0))
rpart.plot(myTree)
View(myTree)
names(myTree)
class(myTree$frame)
View(myTree$frame)
?rpart.plot
class(myTree$splits)
dim(myTree$splits)
View(myTree$splits)
myTree1 <- rpart(year ~.,data=tworavens,control=rpart.control(minsplit=20,cp=0))
rpart.plot(myTree1)
names(myTree1)
View(myTree1$frame)
library(rpart)
library(caret)
library(rpart.plot)
library(rpart.list)
library(jsonlite)
library(partykit)
#read data feoranLatin
tworavens <- read_csv("~/Desktop/Titanic/fearonLaitin.csv")
colnames(tworavens)
myTree <- rpart(year~.,data=tworavens,control=rpart.control(minsplit=20,cp=0))
#rpart.plot(myTree)
samplecsv<- read_json("~/Desktop/Titanic/iris.json")
data.frame(myTree)
samplecsv.error
myTree
tworavens <- read_csv("~/Desktop/Titanic/fearonLaitin.csv")
myTree<-read.csv("~/Desktop/Titanic/fearonLaitin.csv")
myTree <- rpart(year~.,data=tworavens,control=rpart.control(minsplit=20,cp=0))
myTree <- rpart(year~.,data=myTree,control=rpart.control(minsplit=20,cp=0))
myTree
data.frame(myTree)
View(myTree)
myTree<-read.csv("~/Desktop/Titanic/fearonLaitin.csv")
decisionTree <- rpart(year~.,data=myTree,control=rpart.control(minsplit=20,cp=0))
frame(decisionTree)
data.frame(decisionTree)
file<- toJSON(decisionTree)
x<- list(decisionTree)
x
jsontest = toJSON(x, pretty = TRUE, auto_unbox = TRUE)
toJSON(list(coefficients=anorex.1[["coefficients"]],
coefNames=names(anorex.1[["coefficients"]]),
residuals=anorex.1[["residuals"]]))
toJSON(list(coefficients=x[["coefficients"]],
coefNames=names(x[["coefficients"]]),
residuals=x[["residuals"]]))
l<-toJSON(list(coefficients=x[["coefficients"]],
coefNames=names(x[["coefficients"]]),
residuals=x[["residuals"]]))
l
library(party)
irisct <- ctree(Species ~ .,data = iris)
plot(irisct)
get_ctree_parts <- function(x, ...)
{
UseMethod("get_ctree_parts")
}
get_ctree_parts.BinaryTree <- function(x, ...)
{
get_ctree_parts(attr(x, "tree"))
}
get_ctree_parts.SplittingNode <- function(x, ...)
{
with(
x,
list(
name       = toString(nodeID),
children   = list(get_ctree_parts(x$left),get_ctree_parts(x$right))
)
)
}
get_ctree_parts.BinaryTree <- function(x, ...)
{
get_ctree_parts(attr(x, "tree"))
}
get_ctree_parts.SplittingNode <- function(x, ...)
{
with(
x,
list(
name       = toString(nodeID),
children   = list(get_ctree_parts(x$left),get_ctree_parts(x$right))
)
)
}
l<-toJSON(get_ctree_parts(irisct))
library(party)
irisct <- ctree(Species ~ .,data = iris)
plot(irisct)
get_ctree_parts <- function(x, ...)
{
UseMethod("get_ctree_parts")
}
get_ctree_parts.BinaryTree <- function(x, ...)
{
get_ctree_parts(attr(x, "tree"))
}
get_ctree_parts.SplittingNode <- function(x, ...)
{
with(
x,
list(
name       = toString(nodeID),
children   = list(get_ctree_parts(x$left),get_ctree_parts(x$right))
)
)
}
toJSON(get_ctree_parts(irisct))
library(party)
irisct <- ctree(Species ~ .,data = iris)
plot(irisct)
get_ctree_parts <- function(x, ...)
{
UseMethod("get_ctree_parts")
}
get_ctree_parts.BinaryTree <- function(x, ...)
{
get_ctree_parts(attr(x, "tree"))
}
get_ctree_parts.SplittingNode <- function(x, ...)
{
with(
x,
list(
name       = toString(nodeID),
children   = list(get_ctree_parts(x$left),get_ctree_parts(x$right))
)
)
}
get_ctree_parts.TerminalNode <- function(x, ...)
{
with(
x,
list(
name     = paste(nodeID,"weights",sum(weights),"prediaction",toString(paste("[",toString(prediction),"]",sep=" ")),sep = " ")
)
)
}
l<-toJSON(get_ctree_parts(irisct))
library(jsonlite)
library(party)
irisct <- ctree(Species ~ .,data = iris)
plot(irisct)
get_ctree_parts <- function(x, ...)
{
UseMethod("get_ctree_parts")
}
get_ctree_parts.BinaryTree <- function(x, ...)
{
get_ctree_parts(attr(x, "tree"))
}
get_ctree_parts.SplittingNode <- function(x, ...)
{
with(
x,
list(
name       = toString(nodeID),
children   = list(get_ctree_parts(x$left),get_ctree_parts(x$right))
)
)
}
get_ctree_parts.TerminalNode <- function(x, ...)
{
with(
x,
list(
name     = paste(nodeID,"weights",sum(weights),"prediaction",toString(paste("[",toString(prediction),"]",sep=" ")),sep = " ")
)
)
}
l<-toJSON(get_ctree_parts(irisct))
l
library(readr)
fearonLaitin <- read_csv("~/Desktop/Titanic/fearonLaitin.csv")
View(fearonLaitin)
library(party)
myTree <- ctree(year ~ .,data =fearonLaitin )
myTree <- ctree(year ~ .,data =fearonLaitin, ytrafo = NULL, scores = NULL )
library(readr)
test <- read_csv("~/Desktop/Titanic/test.csv")
View(test)
irisct <- ctree(Name ~ .,data = test)
irisct <- ctree(PassengerId~ .,data = test)
myTree
myTree <- rpart(year~.,data=fearonLaitin,control=rpart.control(minsplit=20,cp=0))
library(rpart)
myTree <- rpart(year~.,data=fearonLaitin,control=rpart.control(minsplit=20,cp=0))
library(rpart)
fearonLaitin <- read_csv("~/Desktop/Titanic/fearonLaitin.csv")
myTree <- rpart(year~.,data=fearonLaitin,control=rpart.control(minsplit=20,cp=0))
get_ctree_parts <- function(x, ...)
{
UseMethod("get_ctree_parts")
}
get_ctree_parts.BinaryTree <- function(x, ...)
{
get_ctree_parts(attr(x, "tree"))
}
get_ctree_parts.SplittingNode <- function(x, ...)
{
with(
x,
list(
name       = toString(nodeID),
children   = list(get_ctree_parts(x$left),get_ctree_parts(x$right))
)
)
}
get_ctree_parts.TerminalNode <- function(x, ...)
{
with(
x,
list(
name     = paste(nodeID,"weights",sum(weights),"prediaction",toString(paste("[",toString(prediction),"]",sep=" ")),sep = " ")
)
)
}
l<-toJSON(get_ctree_parts(myTree))
library(readr)
fearonLaitin <- read_csv("~/Desktop/Titanic/fearonLaitin.csv")
View(fearonLaitin)
fearonLaitin$ccode
fearonLaitin$ccode=0
fearonLaitin$ccode
fearonLaitin$cname=0
fearonLaitin$cname
View(fearonLaitin)
fearonLaitin$country=0
View(fearonLaitin)
library(party)
irisct <- ctree(Species ~ .,data = iris,na.action = na.pass)
irisct <- ctree(year ~ .,data = fearonLaitin)
irisct <- ctree(year ~as.character(.),data = fearonLaitin)
irisct <- ctree(year ~as.character(),data = fearonLaitin)
iris
fearonLaitin$cname=null
fearonLaitin$cname=NULL
View(fearonLaitin)
fearonLaitin$country=NULL
fearonLaitin$ccode=NULL
irisct <- ctree(year ~,data = fearonLaitin)
irisct <- ctree(year ~ .,data = fearonLaitin)
source('~/Desktop/Titanic/DecisionTreeSample.R')
fearonLaitin <- read_csv("~/Desktop/Titanic/fearonLaitin.csv")
myTree <- rpart(year~.,data=fearonLaitin,control=rpart.control(minsplit=20,cp=0))
json_prsr <- function(tree, node = 1, node_stats = NULL){
# Checking the decision tree object
if(!is(tree, c("constparty","party")))
tree <- partykit::as.party(tree)
# Parsing into json format
str  <- ""
rule <- partykit:::.list.rules.party(tree, node)
if(is.null(node_stats))
node_stats <- table(tree$fitted[1])
children <- partykit::nodeids(tree, node)
if (length(children) == 1) {
ct  <- node_stats[as.character(children)]
# print("This is ct",ct)
str <- paste("{","'name': '",children,"','size':",ct,",'rule':'",rule,"'}", sep='')
} else {
str <- paste("{","'name': '", node,"', 'rule': '", rule, "', 'children': [", sep='')
for(child in children){
check <- paste("{'name': '", child, "'", sep='')
if(child != node & ( !grepl(check, str, fixed=TRUE) ) ) {
child_str <- json_prsr(tree, child, node_stats)
str <- paste(str, child_str, ',', sep='')
}
}
str <- substr(str, 1, nchar(str)-1) #Remove the comma
str <- paste(str,"]}", sep='')
}
return(str)
}
requiredString <- json_prsr(myTree)
requiredString
source('~/Desktop/Titanic/DecisionTreeSample.R')
fearonLaitin <- read_csv("~/Desktop/Titanic/fearonLaitin.csv")
myTree <- rpart(year~.,data=fearonLaitin,control=rpart.control(minsplit=20,cp=0))
json_prsr <- function(myTree, node = 1, node_stats = NULL){
# Checking the decision tree object
if(!is(tree, c("constparty","party")))
tree <- partykit::as.party(tree)
# Parsing into json format
str  <- ""
rule <- partykit:::.list.rules.party(tree, node)
if(is.null(node_stats))
node_stats <- table(tree$fitted[1])
children <- partykit::nodeids(tree, node)
if (length(children) == 1) {
ct  <- node_stats[as.character(children)]
# print("This is ct",ct)
str <- paste("{","'name': '",children,"','size':",ct,",'rule':'",rule,"'}", sep='')
} else {
str <- paste("{","'name': '", node,"', 'rule': '", rule, "', 'children': [", sep='')
for(child in children){
check <- paste("{'name': '", child, "'", sep='')
if(child != node & ( !grepl(check, str, fixed=TRUE) ) ) {
child_str <- json_prsr(tree, child, node_stats)
str <- paste(str, child_str, ',', sep='')
}
}
str <- substr(str, 1, nchar(str)-1) #Remove the comma
str <- paste(str,"]}", sep='')
}
return(str)
}
requiredString <- json_prsr(myTree)
source('~/Desktop/Titanic/DecisionTreeSample.R')
fearonLaitin <- read_csv("~/Desktop/Titanic/fearonLaitin.csv")
myTree <- rpart(year~.,data=fearonLaitin,control=rpart.control(minsplit=20,cp=0))
json_prsr <- function(tree, node = 1, node_stats = NULL){
# Checking the decision tree object
if(!is(tree, c("constparty","party")))
tree <- partykit::as.party(tree)
# Parsing into json format
str  <- ""
rule <- partykit:::.list.rules.party(tree, node)
if(is.null(node_stats))
node_stats <- table(tree$fitted[1])
children <- partykit::nodeids(tree, node)
if (length(children) == 1) {
ct  <- node_stats[as.character(children)]
# print("This is ct",ct)
str <- paste("{","'name': '",children,"','size':",ct,",'rule':'",rule,"'}", sep='')
} else {
str <- paste("{","'name': '", node,"', 'rule': '", rule, "', 'children': [", sep='')
for(child in children){
check <- paste("{'name': '", child, "'", sep='')
if(child != node & ( !grepl(check, str, fixed=TRUE) ) ) {
child_str <- json_prsr(tree, child, node_stats)
str <- paste(str, child_str, ',', sep='')
}
}
str <- substr(str, 1, nchar(str)-1) #Remove the comma
str <- paste(str,"]}", sep='')
}
return(str)
}
requiredString <- json_prsr(myTree)
find.package('rpart')
x <- c(101, 1213)
ecdf(x)
setwd("/Users/kripanshubhargava/Desktop/raven-metadata-service/preprocess/input/")
source('preprocess.R')
preprocess(filename='/Users/kripanshubhargava/Desktop/raven-metadata-service/preprocess/input/test_file_01.csv')
setwd("/Users/kripanshubhargava/Desktop/raven-metadata-service/preprocess/input/")
source('preprocess.R')
preprocess(filename='/Users/kripanshubhargava/Desktop/raven-metadata-service/preprocess/input/test_file_01.csv')
setwd("/Users/kripanshubhargava/Desktop/raven-metadata-service/preprocess/input/")
source('preprocess.R')
library(plot)
read.csv("/Users/kripanshubhargava/Desktop/raven-metadata-service/preprocess/input/learningData.csv")
df <- read.csv("/Users/kripanshubhargava/Desktop/raven-metadata-service/preprocess/input/learningData.csv")
df$d3mIndex
density(df$d3mIndex)
plot(density(df$d3mIndex))
plot(density(df$cylinders))
plot(density(df$cylinders))
plot(density(df$displacement))
plot(density(df$horsepower))
plot(density(na.omit(df$horsepower))
)
plot(density(na.omit(df$weight)))
plot(density(na.omit(df$acceleration)))
plot(density(na.omit(df$model)))
plot(density(na.omit(df$origin)))
plot(density(na.omit(df$class)))
help(rpois)
a<-rpois(n=2000, lambda=0.1)
hist(a)
b<-rpois(n=2000, lambda=2)
mydata<-c(a,b)
hist(mydata)
a <- c(1.0,
9.081632653061224,
17.163265306122447,
25.24489795918367,
33.326530612244895,
41.408163265306115,
49.48979591836734,
57.57142857142857,
65.65306122448979,
73.73469387755101,
81.81632653061223,
89.89795918367346,
97.97959183673468,
106.0612244897959,
114.14285714285714,
122.22448979591836,
130.30612244897958,
138.3877551020408,
146.46938775510202,
154.55102040816325,
162.63265306122446,
170.7142857142857,
178.79591836734693,
186.87755102040813,
194.95918367346937,
203.0408163265306,
211.1224489795918,
219.20408163265304,
227.28571428571428,
235.36734693877548,
243.44897959183672,
251.53061224489792,
259.61224489795916,
267.69387755102036,
275.7755102040816,
283.85714285714283,
291.93877551020404,
300.0204081632653,
308.1020408163265,
316.1836734693877,
324.2653061224489,
332.3469387755102,
340.4285714285714,
348.5102040816326,
356.59183673469386,
364.67346938775506,
372.75510204081627,
380.83673469387753,
388.91836734693874,
397.0)
b <- c(
0.0012148517952346855,
0.0014232261306304922,
0.001617716554346952,
0.0017895210211620054,
0.001933111306587922,
0.0020468005652867043,
0.002132541630969067,
0.0021950823001507247,
0.0022407434337718022,
0.0022761315612570446,
0.002307054673133963,
0.002337809287026124,
0.0023708893788938193,
0.0024070684120658203,
0.002445744630437674,
0.002485420162167589,
0.002524196650652597,
0.002560199701286587,
0.0025918799116371695,
0.002618173924292724,
0.002638542007960253,
0.0026529243591313337,
0.0026616686336328643,
0.0026654698735429547,
0.0026653338584969356,
0.002662540797047296,
0.002658568522727359,
0.0026549460423060623,
0.0026530449855096962,
0.002653857000593328,
0.0026578238380437057,
0.0026647701639631667,
0.0026739445858038418,
0.002684126306224655,
0.0026937295919000842,
0.0027008488032634033,
0.002703226311801571,
0.0026981734454346084,
0.002682508558516052,
0.0026525841269129428,
0.0026044572711385688,
0.0025342248052648616,
0.0024385054192258148,
0.002315014754116659,
0.002163147139402758,
0.0019844539313959024,
0.0017828994223483003,
0.0015647908006411017,
0.0013383261528922823,
0.0011127822051782965
)
plot(a,b)
