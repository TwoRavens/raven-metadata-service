"""Unit testing for summary_stats_util using sample data"""
import unittest
from os.path import abspath, dirname, join
import json
from collections import OrderedDict

TEST_DATA_DIR = join(dirname(abspath(__file__)), 'test_data')
#INPUT_DIR = join(PREPROCESS_DIR, 'input')

from msg_util import dashes, msgt, msg
from variable_display_util import VariableDisplayUtil


class UpdatePreprocessTest(unittest.TestCase):
    """Unit testing class for summary_stats_util"""

    def setUp(self):
        """Load up the test file"""
        update_01_fname = join(TEST_DATA_DIR, 'update_01.json')
        preprocess_01_fname = join(TEST_DATA_DIR, 'preprocess_01.json')
        update_data = open(update_01_fname, 'r').read()
        preprocess_data = open(preprocess_01_fname, 'r').read()
        self.update_json_01 = json.loads(update_data,
                                         object_pairs_hook=OrderedDict)
        self.preprocess_json_01 = json.loads(preprocess_data,
                                             object_pairs_hook=OrderedDict)
        self.expected_output = json.dumps({
    "$schema": "http://(link to eventual schema)/jjonschema/1-0-0#",
    "self": {
        "description": "TwoRavens metadata generated by ....",
        "created": "..time stamp..",
        "preprocess_id": 45,
        "data_url": "http://metadata.2ravens-url.org/preprocess/data/45",
        "format": "jsonschema",
        "preprocess_version": "1-0-0",
        "schema_version": "1.0.0"
    },
    "variables": {
        "cylinders": {
            "numchar": "discrete",
            "nature": "ordinal",
            "mean": 213,
            "median": 34
        },
        "mpg": {
            "numchar": "continuous",
            "nature": " ordinal",
            "mean": 313,
            "median": 54
        }
    },
    "variable_display": {
        "cylinders": {
            "viewable": "true",
            "omit": [
                "mean",
                "median"
            ],
            "label": {
                "numchar": "discrete",
                "nature": "ordinal"
            },
            "images": {
                "url1": {
                    "type": "pdf",
                    "description": "This is the density of the mpg variable.",
                    "dateCreated": "timestamp",
                    "version": "imagecreate v0.1"
                }
            }
        },
        "mpg": {
            "viewable": "false",
            "omit": [],
            "label": "",
            "images": {
                "url1": {
                    "type": "pdf",
                    "description": "This is the density of the mpg variable.",
                    "dateCreated": "timestamp",
                    "version": "imagecreate v0.1"
                }
            }
        }
    }

},indent=4);



    def test_10_update(self):
        """(10) Test the data for numeric series"""
        msgt(self.test_10_update.__doc__)
        # print("** update json **")
        # print(self.update_json_01)
        # print("** preprocess json **")
        # print(self.preprocess_json_01)

        self.assertTrue('preprocess_id' in self.update_json_01)
        # self.assertTrue('preprocess_id' in self.preprocess_json_01)


    def test_20_update(self):
        """(20) Test output json"""
        msgt(self.test_20_update.__doc__)
        var_display_util = VariableDisplayUtil(self.preprocess_json_01, self.update_json_01).final_original_output()
        # print(var_display_util)
        # print(self.expected_output)
        self.assertTrue(var_display_util == self.expected_output)


    def test_30_update(self):
        """(30) test if there is no error"""
        msgt(self.test_30_update.__doc__)
        var_display = VariableDisplayUtil(self.preprocess_json_01,self.update_json_01)
        self.assertTrue(var_display)