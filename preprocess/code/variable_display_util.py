"""Module for a variable's display settings"""
from collections import OrderedDict
import pandas as pd
from pandas.api.types import is_float_dtype, is_numeric_dtype
import json
import col_info_constants as col_const
from column_info import ColumnInfo
from np_json_encoder import NumpyJSONEncoder


class VariableDisplayUtil(object):

    def __init__(self, column_name, **kwargs):
        """Init with a pandas dataframe"""
        assert col_info is not None, "dataframe can't be None"
        self.column_name = column_name

        # Initial settings
        self.viewable = kwargs.get('viewable', True)
        self.omit = kwargs.get('omit', [])
        self.images = kwargs.get('images', [])

        self.editable_labels = ColumnInfo.get_editable_column_labels()  # list of all the attributes set as editable ***
        self.editable_vars = ColumnInfo.EDITABLE_COLUMNS      # list of all the attributes set as editable ***

        # for error handling
        self.has_error = False
        self.error_messages = []

    def add_error_message(self, err_msg):
        """Add error message"""
        print(err_msg)
        self.has_error = True
        self.error_messages.append(err_msg)

    @staticmethod
    def get_default_settings():
        """Return the initial preprocess settings"""
        return OrderedDict(viewable=True,
                           omit=[],
                           images=[])


    def get_update_json(self):
        """
        This is the sample json file I am using to test
                    {
            "preprocess_id": 45,
            "variable_updates": {
               "cylinders" : {
                 "omit": ["mean", "median"],
                 "label": "(new value is here)"
               },
               "mpg" : {
                 "viewable": false
               }
            }
        :return:
        """
        # code to get the updated json from endpoint
        sample_json = \
            {
            "preprocess_id": 45,
            "variable_updates": {
               "cylinders" : {
                  "viewable": True,
                 "omit": ["mean", "median"],
                 "label": {
                     "numchar":"discrete",
                     "nature": "ordinal"
                 }
               },
               "mpg": {
                 "viewable": False,
                 "omit": [],
                 "label": {

                 }
               }
            }
        }

        return json.dumps(sample_json, indent=4, cls=NumpyJSONEncoder)

    def get_original_json(self):
        """
        This is the sample json file I am using to test
                {
           "$schema":"http://(link to eventual schema)/jjonschema/1-0-0#",
           "self":{
              "description":"TwoRavens metadata generated by ....",
              "created":"..time stamp..",
              "preprocess_id":45,
              "data_url":"http://metadata.2ravens-url.org/preprocess/data/45",
              "format":"jsonschema",
              "preprocess_version":"1-0-0",
              "schema_version":"1.0.0"
           },
           "variables":{
              "cylinders":{
                 "label":"",
                 "mean":213,
                 "median":34
              }
           },
           "variable_display":{
              "editable":[
                 "label",
                 "varSumState"
              ],
              "cylinders":{
                 "viewable":"true",
                 "omit":[
                    "numChar",
                    "mean"
                 ],
                 "images":{
                    "url1":{
                       "type":"pdf",
                       "description":"This is the density of the mpg variable.",
                       "dateCreated":"timestamp",
                       "version":"imagecreate v0.1"
                    }
                 }
              }
           }
        }
        :return:
        """
        original_json = \
            {
               "$schema":"http://(link to eventual schema)/jjonschema/1-0-0#",
               "self":{
                  "description":"TwoRavens metadata generated by ....",
                  "created":"..time stamp..",
                  "preprocess_id":45,
                  "data_url":"http://metadata.2ravens-url.org/preprocess/data/45",
                  "format":"jsonschema",
                  "preprocess_version":"1-0-0",
                  "schema_version":"1.0.0"
               },
               "variables": {
                  "cylinders": {
                     "numchar":"continuous",
                      "nature": "nominal",
                     "mean":213,
                     "median":34

                  },
                  "mpg":{
                      "numchar": "continuous",
                       "nature": " ordinal",
                       "mean": 313,
                       "median": 54

                   }
               },
               "variable_display":{
                  "cylinders":{
                     "viewable":"true",
                     "omit":[
                        "numChar",
                        "mean"
                     ],
                     "label":"",
                     "images":{
                        "url1":{
                           "type":"pdf",
                           "description":"This is the density of the mpg variable.",
                           "dateCreated":"timestamp",
                           "version":"imagecreate v0.1"
                        }
                     }
                  }
               }
            }

        return json.dumps(original_json, indent=4, cls=NumpyJSONEncoder)

    def var_display(self):
        """ this function go through the update_json and call omit,viewable,label functions"""
        update_json = self.get_update_json()
        print(update_json)

        access_object = update_json['variable_updates']
        # for each column say [' cylinder','mpg',...]
        for varname in self.col_names:
            omit_object = access_object[varname]['omit']
            viewable_object = access_object[varname]['viewable']
            label_object = access_object[varname]['label']

            self.modify_original(varname, omit_object, viewable_object, label_object)

            # if omit_object is not None:
            #     self.omit_call(varname, omit_object)
            #
            # if viewable_object is False:
            #     self.viewable_call(varname)
            #
            # if label_object is not None:
            #     self.label_edit_call(varname, label_object)

    def modify_original(self, varname, omit_obj, viewable_obj, label_obj):
        self.original_json = self.get_original_json()
        access_obj_original = self.original_json['variables']
        access_obj_original_display = self.original_json['variable_display']
        for var in self.col_names:
          variable_obj = access_obj_original[var]
          display_variable_obj = access_obj_original_display[var]
          print(variable_obj)
          """
          variable_obj contains : "numchar":"continuous",
                      "nature": "nominal",
                     "mean":213,
                     "median":34
          """
          # code for omit
          if omit_obj is not None and var is varname:
            # start deleting omit objects
            for omit_var in omit_obj:
                del variable_obj[omit_var]

            display_variable_obj['omit'] = omit_obj



          # code for viewable
          if viewable_obj is False and viewable_obj is not None:
                del access_obj_original[var]
                display_variable_obj['viewable'] = False

          # code for label
          if label_obj is not None and var is varname:
            for att_name in self.attributes:
                if att_name in label_obj and att_name in self.editable:
                    variable_obj[att_name] = label_obj[att_name]

            display_variable_obj['label'] = label_obj


    def final_original_output(self):
        print(self.original_json)
        return json.dumps(self.original_json, indent=4, cls=NumpyJSONEncoder)
