---
apiVersion: v1
kind: Service
metadata:
  name: ravens-preprocess-svc
  labels:
    app: ravens-preprocess-svc
spec:
  selector:
    app: ravens-preprocess-app
    tier: web
  ports:
  - port: 80
    targetPort: 8080
  type: LoadBalancer
  # This IP is tied to: metadata.2ravens.org
  loadBalancerIP: 35.192.35.125
---
# ---------------------------------------------------------
# EventData - Kubernetes Pod File
# ---------------------------------------------------------
apiVersion: v1
kind: Pod
metadata:
  name: ravens-preprocess-app
  labels:
    app: ravens-preprocess-app
    tier: web
spec:
  restartPolicy: Always
  volumes:
    - name: raven-metadata-volume
      emptyDir: {}
    - name: cloudsql-instance-credentials
      secret:
        secretName: cloudsql-instance-credentials
  containers:
  # -------------------------
  # 1 of 4: redis
  # -------------------------
  - name: redis
    image: redis:4.0
    #resources:
    #  requests:
    #    cpu: 100m
    #    memory: 100Mi
    ports:
    - containerPort: 6379
  # -------------------------
  # 2 of 4: cloudsql proxy
  # -------------------------
  - name: cloudsql-proxy
    image: gcr.io/cloudsql-docker/gce-proxy:1.11
    command: ["/cloud_sql_proxy",
              "-instances=raven2-186120:us-central1:raven-mysql-metadata-svc=tcp:3306",
              "-credential_file=/secrets/cloudsql/credentials.json"]
    volumeMounts:
      - name: cloudsql-instance-credentials
        mountPath: /secrets/cloudsql
        readOnly: true
  # -------------------------
  # 3 of 4: celery worker
  # -------------------------
  - name: celery-worker
    image: tworavens/raven-metadata-service:latest
    #imagePullPolicy: IfNotPresent
    command: ['celery', '-A', 'ravens_metadata', 'worker', '-l', 'info']
    env:
      - name: DJANGO_SETTINGS_MODULE
        value: "ravens_metadata.settings.gce_deploy_settings"
      - name: REDIS_HOST
        # Note this is within the same pod
        value: localhost
      - name: GCE_CREDS_INFO
        valueFrom:
          secretKeyRef:
            name: gce-creds-variable
            key: GCE_CREDS_INFO
      - name: DB_HOST
        value: "127.0.0.1"
      - name: DB_PORT
        value: 3306
      - name: DB_USER
        valueFrom:
          secretKeyRef:
            name: cloudsql-db-credentials
            key: username
      - name: DB_PASSWORD
        valueFrom:
          secretKeyRef:
            name: cloudsql-db-credentials
            key: password
    volumeMounts:
      - name: "raven-metadata-volume"
        mountPath: "/raven_metadata"
        readOnly: false
        #valueFrom:
        #  secretKeyRef:
        #    name: postgres-credentials
        #    key: user
  # -------------------------
  # 4 of 4: web server
  # -------------------------
  - name: preprocess-web
    image: tworavens/raven-metadata-service:latest
    #imagePullPolicy: IfNotPresent
    ports:
      - containerPort: 8080
        name: http
        protocol: TCP
    env:
      - name: DJANGO_SETTINGS_MODULE
        value: "ravens_metadata.settings.gce_deploy_settings"
      - name: REDIS_HOST
        # Note this is within the same pod
        value: localhost
      - name: DJANGO_DEBUG
        value: "True"
      - name: SWAGGER_HOST
        value: "metadata.2ravens.org"
      - name: EDITOR_URL
        value:
      - name: GCE_CREDS_INFO
        valueFrom:
          secretKeyRef:
            name: gce-creds-variable
            key: GCE_CREDS_INFO
      - name: DB_HOST
        value: "127.0.0.1"
      - name: DB_PORT
        value: 3306
      - name: DB_USER
        valueFrom:
          secretKeyRef:
            name: cloudsql-db-credentials
            key: username
      - name: DB_PASSWORD
        valueFrom:
          secretKeyRef:
            name: cloudsql-db-credentials
            key: password
    volumeMounts:
      - name: "raven-metadata-volume"
        mountPath: "/raven_metadata"
        readOnly: false
    # liveness is for restart
    livenessProbe:
      httpGet:
        path: /monitoring/alive
        port: 8080
      initialDelaySeconds: 5
      timeoutSeconds: 1
      periodSeconds: 10
      failureThreshold: 3
    # readiness: ready for traffic
    readinessProbe:
      httpGet:
        path: /monitoring/alive
        port: 8080
      initialDelaySeconds: 30
      periodSeconds: 10
